diff --git a/lib/pp.ml4 b/lib/pp.ml4
index f13a3d1..9e83d0a 100644
--- a/lib/pp.ml4
+++ b/lib/pp.ml4
@@ -109,6 +109,39 @@ let utf8_length s =
   done ;
   !cnt
 
+(* Variant of String.sub for UTF8 character positions *)
+let utf8_sub s start_u len_u =
+  let len_b = String.length s
+  and end_u = start_u + len_u   
+  and cnt = ref 0
+  and nc = ref 0
+  and p = ref 0 in
+  let start_b = ref len_b in
+  while !p < len_b && !cnt < end_u do
+    if !cnt <= start_u then start_b := !p ;
+    begin
+      match s.[!p] with
+      | '\000'..'\127' -> nc := 0 (* ascii char *)
+      | '\128'..'\191' -> nc := 0 (* cannot start with a continuation byte *)
+      |	'\192'..'\223' -> nc := 1 (* expect 1 continuation byte *)
+      |	'\224'..'\239' -> nc := 2 (* expect 2 continuation bytes *)
+      |	'\240'..'\247' -> nc := 3 (* expect 3 continuation bytes *)
+      |	'\248'..'\251' -> nc := 4 (* expect 4 continuation bytes *)
+      |	'\252'..'\253' -> nc := 5 (* expect 5 continuation bytes *)
+      |	'\254'..'\255' -> nc := 0 (* invalid byte *)
+    end ;
+    incr p ;
+    while !p < len_b && !nc > 0 do
+      match s.[!p] with
+      |	'\128'..'\191' (* next continuation byte *) -> incr p ; decr nc
+      |	_ (* not a continuation byte *) -> nc := 0
+    done ;
+    incr cnt
+  done ;
+  let end_b = !p in
+  String.sub s !start_b (end_b - !start_b)
+
+
 (* formatting commands *)
 let str s = [< 'Ppcmd_print (utf8_length s,s) >]
 let stras (i,s) = [< 'Ppcmd_print (i,s) >]
diff --git a/lib/pp.mli b/lib/pp.mli
index 695bcbc..4d8c61d 100644
--- a/lib/pp.mli
+++ b/lib/pp.mli
@@ -122,3 +122,6 @@ val msg_warn : string -> unit
 val msg_debug : std_ppcmds -> unit
 
 val string_of_ppcmds : std_ppcmds -> string
+
+val utf8_length : string -> int
+val utf8_sub : string -> int -> int -> string
diff --git a/tactics/hightactics.mllib b/tactics/hightactics.mllib
index 7d12f9d..570f570 100644
--- a/tactics/hightactics.mllib
+++ b/tactics/hightactics.mllib
@@ -6,3 +6,4 @@ Class_tactics
 Rewrite
 Tauto
 Eqdecide
+Profile_ltac_tactics
diff --git a/tactics/profile_ltac.ml b/tactics/profile_ltac.ml
new file mode 100644
index 0000000..9e5797b
--- /dev/null
+++ b/tactics/profile_ltac.ml
@@ -0,0 +1,204 @@
+open Pp
+open Printer
+open Util
+
+
+let is_profiling = ref false
+let set_profiling b = is_profiling := b
+
+
+let new_call = ref false
+let entered_call() = new_call := true
+let is_new_call() = let b = !new_call in new_call := false; b
+
+
+type entry = {mutable total : float; mutable local : float; mutable ncalls : int; mutable max_total : float}
+let empty_entry() = {total = 0.; local = 0.; ncalls = 0; max_total = 0.}
+let add_entry e add_total {total; local; ncalls; max_total} =
+  if add_total then e.total <- e.total +. total;
+  e.local <- e.local +. local;
+  e.ncalls <- e.ncalls + ncalls;
+  if add_total then e.max_total <- max e.max_total max_total				       
+
+type treenode = {entry : entry; children : (string, treenode) Hashtbl.t}
+let stack = ref [{entry=empty_entry(); children=Hashtbl.create 20}]
+
+let on_stack = Hashtbl.create 5
+
+let get_node c table = 
+  try Hashtbl.find table c
+  with Not_found ->
+    let new_node = {entry=empty_entry(); children=Hashtbl.create 5} in
+    Hashtbl.add table c new_node;
+    new_node
+
+let rec add_node node node' =
+  add_entry node.entry true node'.entry;
+  Hashtbl.iter
+    (fun s node' -> add_node (get_node s node.children) node')
+    node'.children
+
+let time() = 
+  let times = Unix.times() in
+  times.Unix.tms_utime +. times.Unix.tms_stime
+
+let try_finalize f (finally : unit -> unit) =
+  let res = try f() with exn -> finally(); raise exn in
+  finally();
+  res
+
+let exit_tactic start_time c add_total =
+  let node :: stack' = !stack in
+  let parent = List.hd stack' in
+  stack := stack';
+  if add_total then Hashtbl.remove on_stack c;
+  let diff = time() -. start_time in
+  parent.entry.local <- parent.entry.local -. diff;
+  add_entry node.entry add_total {total = diff; local = diff; ncalls = 1; max_total = diff}
+
+let string_of_call ck =
+  let s =
+  string_of_ppcmds
+    (match ck with
+       | Proof_type.LtacNotationCall s -> str s
+       | Proof_type.LtacNameCall cst -> Pptactic.pr_ltac_constant cst
+       | Proof_type.LtacVarCall (id,t) -> Nameops.pr_id id
+       | Proof_type.LtacAtomCall (te,otac) ->
+	 (Pptactic.pr_glob_tactic (Global.env())
+	    (Tacexpr.TacAtom (dummy_loc,te)))
+       | Proof_type.LtacConstrInterp (c,(vars,unboundvars)) -> 
+	 pr_glob_constr_env (Global.env()) c
+    ) in
+  for i = 0 to String.length s - 1 do if s.[i] = '\n' then s.[i] <- ' ' done;
+  let s = try String.sub s 0 (Util.string_index_from s 0 "(*") with Not_found -> s in
+  Util.strip s
+	    
+let do_profile s call_trace f =
+  if !is_profiling && is_new_call() then
+    match call_trace with
+      | (_, _, c) :: _ ->
+	let s = string_of_call c in
+	let parent = List.hd !stack in
+	let node, add_total = try Hashtbl.find on_stack s, false
+			      with Not_found -> 
+				   let node = get_node s parent.children in
+				   Hashtbl.add on_stack s node;
+				   node, true
+	in
+	if not add_total && node = List.hd !stack then f() else (
+	  stack := node :: !stack;
+	  let start_time = time() in
+	  try_finalize f (fun()->
+			  exit_tactic start_time s add_total
+			 )
+	)
+      | [] -> f()
+  else f()
+
+let format_sec x = (Printf.sprintf "%.3fs" x)
+let format_ratio x = (Printf.sprintf "%.1f%%" (100. *. x))
+let padl n s = ws (max 0 (n - utf8_length s)) ++ str s
+let padr n s = str s ++ ws (max 0 (n - utf8_length s))
+let padr_with c n s = 
+  let ulength = utf8_length s in
+  let length = String.length s in
+  str (utf8_sub s 0 n) ++ str(String.make (max 0 (n - ulength)) c)  
+
+let rec list_iter_is_last f = function
+  | []      -> ()
+  | [x]     -> f true x
+  | x :: xs -> f false x; list_iter_is_last f xs
+
+let header() = 
+  msgnl(str" tactic                                    self  total   calls       max");
+  msgnl(str"────────────────────────────────────────┴──────┴──────┴───────┴─────────┘")
+
+let rec print_node all_total indent prefix (s,n) =
+  let e = n.entry in
+  msgnl(
+    h 0(
+      padr_with '-' 40 (prefix ^ s ^ " ")
+      ++padl 7 (format_ratio (e.local /. all_total))
+      ++padl 7 (format_ratio (e.total /. all_total))
+      ++padl 8 (string_of_int e.ncalls)
+      ++padl 10 (format_sec(e.max_total))
+    )
+    );
+  print_table all_total indent false n.children
+
+and print_table all_total indent first_level table =
+  let ls = Hashtbl.fold 
+	     (fun s n l -> if n.entry.total /. all_total < 0.02 then l else (s, n) :: l) 
+      table [] in
+  match ls with
+  | [(s,n)]  when (not first_level) ->    
+     print_node all_total indent (indent^"└") (s,n)
+  | _ ->
+     let ls = List.sort (fun (_, n1) (_, n2) -> compare n2.entry.total n1.entry.total) ls in
+     list_iter_is_last
+       (fun is_last ->
+	print_node
+	  all_total
+	  (indent^if first_level then "" else if is_last then "  " else " │")
+	  (indent^if first_level then "─" else if is_last then " └─" else " ├─")
+       )
+       ls
+
+let print_results() =
+  let tree = (List.hd !stack).children in
+  let all_total = -. (List.hd !stack).entry.local in
+  let global = Hashtbl.create 20 in
+  let rec cumulate table =
+    Hashtbl.iter 
+      (fun s node ->
+	let node' = get_node s global in
+	add_entry node'.entry true node.entry;
+	cumulate node.children
+      )
+      table
+  in
+  cumulate tree;
+  msgnl(str"");
+  msgnl(h 0(
+      str"total time: "++padl 11 (format_sec(all_total))
+    )
+       );
+  msgnl(str"");
+  header();
+  print_table all_total "" true global;
+  msgnl(str"");
+  header();
+  print_table all_total "" true tree
+
+let print_results_tactic tactic =
+  let tree = (List.hd !stack).children in
+  let table_tactic = Hashtbl.create 20 in
+  let rec cumulate table =
+    Hashtbl.iter
+      (fun s node ->
+       if String.sub (s^".") 0 (min (1+String.length s) (String.length tactic)) = tactic
+       then add_node (get_node s table_tactic) node
+       else cumulate node.children
+      )
+      table
+  in
+  cumulate tree;
+  let all_total = -. (List.hd !stack).entry.local in
+  let tactic_total =
+    Hashtbl.fold
+      (fun _ node all_total -> node.entry.total +. all_total)
+      table_tactic 0. in
+  msgnl(str"");
+   msgnl(h 0(
+      str"total time:           "++padl 11 (format_sec(all_total))
+    )
+	);
+   msgnl(h 0(
+      str"time spent in tactic: "++padl 11 (format_sec(tactic_total))
+    )
+       );
+  msgnl(str"");
+  header();
+  print_table tactic_total "" true table_tactic
+	      
+let reset_profile() = stack := [{entry=empty_entry(); children=Hashtbl.create 20}]
diff --git a/tactics/profile_ltac.mli b/tactics/profile_ltac.mli
new file mode 100644
index 0000000..0455e51
--- /dev/null
+++ b/tactics/profile_ltac.mli
@@ -0,0 +1,11 @@
+val do_profile : string -> ('a * 'b * Proof_type.ltac_call_kind) list -> (unit -> 'c) -> 'c
+
+val set_profiling : bool -> unit
+
+val entered_call : unit -> unit
+
+val print_results : unit -> unit
+
+val print_results_tactic : string -> unit
+			      
+val reset_profile : unit -> unit
diff --git a/tactics/profile_ltac_tactics.ml b/tactics/profile_ltac_tactics.ml
new file mode 100644
index 0000000..08f1e85
Binary files /dev/null and b/tactics/profile_ltac_tactics.ml differ
diff --git a/tactics/profile_ltac_tactics.ml4 b/tactics/profile_ltac_tactics.ml4
new file mode 100644
index 0000000..d536f40
--- /dev/null
+++ b/tactics/profile_ltac_tactics.ml4
@@ -0,0 +1,36 @@
+(*i camlp4deps: "parsing/grammar.cma" i*)
+
+open Profile_ltac
+
+let tclSET_PROFILING b = fun gl -> 
+   set_profiling b; Tacticals.tclIDTAC gl    
+
+TACTIC EXTEND start_profiling
+  | [ "start" "profiling" ] -> [ tclSET_PROFILING true  ]    
+END
+    
+TACTIC EXTEND stop_profiling 
+  | [ "stop" "profiling" ] ->  [ tclSET_PROFILING false ]    
+END;;
+
+
+VERNAC COMMAND EXTEND StartProfiling
+ [ "Start" "Profiling" ] -> [ reset_profile(); set_profiling true ]
+END
+
+VERNAC COMMAND EXTEND StopProfiling
+ [ "Stop" "Profiling" ] -> [ set_profiling false ]
+ END
+
+VERNAC COMMAND EXTEND ResetProfiling
+ [ "Reset" "Profile" ] -> [ reset_profile() ]
+END
+
+VERNAC COMMAND EXTEND ShowProfile
+ [ "Show" "Profile" ] -> [ print_results() ]
+END
+
+
+VERNAC COMMAND EXTEND ShowProfileTactic
+ [ "Show" "Profile" string(s) ] -> [ print_results_tactic s ]
+END
\ No newline at end of file
diff --git a/tactics/tacinterp.ml b/tactics/tacinterp.ml
index 9572277..f189dab 100644
--- a/tactics/tacinterp.ml
+++ b/tactics/tacinterp.ml
@@ -277,7 +277,7 @@ let lookup_genarg_subst  id = let (_,_,f) = lookup_genarg id in f
 
 let push_trace (loc,ck) = function
   | (n,loc',ck')::trl when ck=ck' -> (n+1,loc,ck)::trl
-  | trl -> (1,loc,ck)::trl
+  | trl -> Profile_ltac.entered_call(); (1,loc,ck)::trl
 
 let propagate_trace ist loc id = function
   | VFun (_,lfun,it,b) ->
@@ -1793,7 +1793,9 @@ and eval_tactic ist = function
 	  catch_error (push_trace(dloc,call)ist.trace)
 	    (interp_atomic ist gl) t	in
 	(* catch error in the evaluation *)
-	catch_error (push_trace(loc,call)ist.trace) tac gl
+	let trace = push_trace(loc,call)ist.trace in
+	Profile_ltac.do_profile "eval_tactic:2" trace (fun()->
+	  catch_error trace tac gl)
   | TacFun _ | TacLetIn _ -> assert false
   | TacMatchGoal _ | TacMatch _ -> assert false
   | TacId s -> fun gl ->
@@ -1945,7 +1947,7 @@ and tactic_of_value ist vle g =
   | VRTactic res -> res
   | VFun (trace,lfun,[],t) ->
       let tac = eval_tactic {ist with lfun=lfun; trace=trace} t in
-      catch_error trace tac g
+    Profile_ltac.do_profile "tactic_of_value" trace (fun()-> catch_error trace tac g)
   | (VFun _|VRec _) -> error "A fully applied tactic is expected."
   | VConstr _ -> errorlabstrm "" (str"Value is a term. Expected a tactic.")
   | VConstr_context _ ->
@@ -1962,7 +1964,7 @@ and eval_with_fail ist is_lazy goal tac =
     (match v with
     | VFun (trace,lfun,[],t) when not is_lazy ->
 	let tac = eval_tactic {ist with lfun=lfun; trace=trace} t in
-	VRTactic (catch_error trace tac { goal with sigma=sigma })
+	VRTactic (Profile_ltac.do_profile "eval_with_fail" trace (fun() -> catch_error trace tac { goal with sigma=sigma }))
     | a -> a)
   with
     | FailError (0,s) | Loc.Exc_located(_, FailError (0,s))
diff --git a/tactics/tactics.mllib b/tactics/tactics.mllib
index f132480..da75068 100644
--- a/tactics/tactics.mllib
+++ b/tactics/tactics.mllib
@@ -15,6 +15,7 @@ Equality
 Contradiction
 Inv
 Leminv
+Profile_ltac
 Tacinterp
 Evar_tactics
 Autorewrite
