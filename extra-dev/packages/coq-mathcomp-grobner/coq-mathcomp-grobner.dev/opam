opam-version: "2.0"
maintainer: "Laurent.Thery@inria.fr"
homepage: "https://github.com/thery/grobner"
bug-reports: "https://github.com/thery/grobner/issues"
license: "MIT"
build: [
  ["./configure.sh"]
  [make "-j%{jobs}%"]
  [make "install"]
]
remove: [
  ["rm" "-R" "%{lib}%/coq/user-contrib/mathcomp/contrib/grobner"]
  ["sh" "-c" "rmdir %{lib}%/coq/user-contrib/mathcomp/contrib || true"]
]
depends: [
  "ocaml"
  "coq" {>= "8.5"}
  "coq-mathcomp-ssreflect" {>= "1.6"}
  "coq-mathcomp-algebra"
  "coq-mathcomp-multinomials" {= "1.6.dev"}
]
synopsis: "# grobner"
description: """
A fornalisation of Grobner basis in ssreflect.
It contains one file

grobner.v

It defines.

From mathcomp Require Import all_ssreflect all_algebra.
From SsrMultinomials Require Import ssrcomplements poset freeg mpoly.
From mathcomp.contrib.grobner Require Import grobner.

(* p belongs to the ideal generated by L *)

Check ideal.

ideal = 
fun (R : ringType) (n : nat) (L : seq {mpoly R[n]}) (p : {mpoly R[n]})
  =>
  exists t, p = \\sum_(i < size L) t`_i * L`_i


(* it is decidable *)

Check idealfP.

idealfP
     : forall (R : fieldType)  (n : nat) (p : {mpoly R[n]})
              (l : seq {mpoly R[n]}),
       reflect (ideal l p) (idealf l p)"""
url {
  src: "https://github.com/thery/grobner/archive/v1.0.1.zip"
  checksum: "md5=ee88f5010096f45a5be120de58910913"
}
