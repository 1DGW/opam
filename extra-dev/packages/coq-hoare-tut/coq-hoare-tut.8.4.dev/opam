opam-version: "2.0"
maintainer: "dev@clarus.me"
homepage: "https://github.com/coq-contribs/hoare-tut"
license: "GNU LGPL"
build: [
  ["coq_makefile" "-f" "Make" "-o" "Makefile"]
  [make "-j%{jobs}%"]
  [make "install"]
]
remove: ["rm" "-R" "%{lib}%/coq/user-contrib/HoareTut"]
depends: [
  "ocaml"
  "coq" {= "8.4.dev"}
]
tags: [ "keyword:hoare logic" "keyword:imperative program" "keyword:weakest precondition" "keyword:reflection" "category:Computer Science/Semantics and Compilation/Semantics" "date:2007" ]
authors: [ "Sylvain Boulm√© <Sylvain.Boulme@imag.fr>" ]
synopsis:
  "A Tutorial on Reflecting in Coq the generation of Hoare proof obligations."
description: """
This work is both an introduction to Hoare logic and a demo
illustrating Coq nice features. It formalizes the generation of PO
(proof obligations) in a Hoare logic for a very basic imperative
programming language. It proves the soundness and the completeness of
the PO generation both in partial and total correctness. At last, it
examplifies on a very simple example (a GCD computation) how the PO
generation can simplify concrete proofs. Coq is indeed able to compute
PO on concrete programs: we say here that the generation of proof
obligations is reflected in Coq. Technically, the PO generation is
here performed through Dijkstra's weakest-precondition calculus."""
flags: light-uninstall
url {
  src: "git+https://github.com/coq-contribs/hoare-tut.git#v8.4"
}
